name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MIX_ENV: test
    
permissions:
  contents: read

jobs:

  build:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: [1.13.0]
        otp: [24.1.7]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }} # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: |
        cd eth_client/
        mix deps.get
    - name: Check Formatting
      run: |
        cd eth_client/
        mix format --check-formatted
    - name: Run Credo
      run: |
        cd eth_client/
        mix credo --strict
    - name: Retrieve PLT Cache
      uses: actions/cache@v1
      id: plt-cache
      with:
        path: eth_client/priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
    - name: Create PLTs
      if: steps.plt-cache.outputs.cache-hit != 'true'
      run: |
        cd eth_client/
        mkdir -p priv/plts
        mix dialyzer --plt

    - name: Run tests
      env:
        ETH_API_KEY: ${{ secrets.ETH_API_KEY }}
        ETH_CHAIN_ID: ${{ secrets.ETH_CHAIN_ID }}
        ETH_RPC_HOST: ${{ secrets.ETH_RPC_HOST }}
        ETH_USER_ADDRESS: ${{ secrets.ETH_USER_ADDRESS }}
        ETH_USER_PK: ${{ secrets.ETH_USER_PK }}
      run: |
        cd eth_client/
        mix test

    - name: Code Coverage
      env:
        ETH_API_KEY: ${{ secrets.ETH_API_KEY }}
        ETH_CHAIN_ID: ${{ secrets.ETH_CHAIN_ID }}
        ETH_RPC_HOST: ${{ secrets.ETH_RPC_HOST }}
        ETH_USER_ADDRESS: ${{ secrets.ETH_USER_ADDRESS }}
        ETH_USER_PK: ${{ secrets.ETH_USER_PK }}
      run: |
        cd eth_client/
        mix coveralls
    - name: Run dialyzer
      run: |
        cd eth_client/
        mix dialyzer
