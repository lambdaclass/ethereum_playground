name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MIX_ENV: test
    
permissions:
  contents: read

jobs:

  build:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: [1.13.0]
        otp: [24.1.7]
    services:

      ethereum_node1:
        command: --datadir /root/private_network/node1 --networkid 1234 --port 30304
          --nodiscover --http --http.addr 0.0.0.0 --http.port 8545
          --ipcpath /root/private_network/node1/geth.ipc --mine --miner.threads 1
          --miner.gasprice "10000" --miner.etherbase 0xafb72ccaeb7e22c8a7640f605824b0898424b3da
          --verbosity 5 --allow-insecure-unlock --fakepow --http.api eth,web3,personal,admin
          --unlock 0xafb72ccaeb7e22c8a7640f605824b0898424b3da
          --password /root/private_network/password
          --http.vhosts=*
        hostname: ethereum
        image: ethereum/client-go:stable
        ports:
        - 30304:30304
        - 8545:8545
        volumes:
        - ./geth_nodes/private_network:/root/private_network

      ethereum_node2:
        command: --datadir /root/private_network/node2 --networkid 1234 --port 30305
          --nodiscover --http --http.addr 0.0.0.0 --http.port 8546
          --ipcpath /root/private_network/node2/geth.ipc --mine --miner.threads 1
          --miner.gasprice "10000" --miner.etherbase 0x77b648683cde1d69544ed6f4f7204e8d51c324db
          --verbosity 5 --allow-insecure-unlock --fakepow --http.api eth,web3,personal,admin
          --unlock 0x77b648683cde1d69544ed6f4f7204e8d51c324db
          --password /root/private_network/password
          --http.vhosts=*
        hostname: ethereum
        image: ethereum/client-go:stable
        ports:
        - 30305:30305
        - 8546:8546
        volumes:
        - ./geth_nodes/private_network:/root/private_network

    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }} # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: |
        cd eth_client/
        mix deps.get
    - name: Check Formatting
      run: |
        cd eth_client/
        mix format --check-formatted
    - name: Run Credo
      run: |
        cd eth_client/
        mix credo --strict
    - name: Retrieve PLT Cache
      uses: actions/cache@v1
      id: plt-cache
      with:
        path: eth_client/priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
    - name: Create PLTs
      if: steps.plt-cache.outputs.cache-hit != 'true'
      run: |
        cd eth_client/
        mkdir -p priv/plts
        mix dialyzer --plt
    - name: Run tests
      run: |
        source .envrc
        cd eth_client/
        mix test
    - name: Code Coverage
      run: |
        source .envrc
        cd eth_client/
        mix coveralls
    - name: Run dialyzer
      run: |
        cd eth_client/
        mix dialyzer
